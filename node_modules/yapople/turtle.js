class Ground {
    #ground

    constructor(initialArray) {
        if (Ground.check(initialArray)) {
            this.#ground = initialArray;
        } else {
            throw new Error('This is not a ground!');
        }
    }

    /**
     * @param {Array<Array<number>>}ground
     * @returns {boolean}
     */
    static check(ground) {
        return Array.isArray(ground) &&
            ground.every(row => Array.isArray(row) && row.every(point => Object(point) !== point));
    }

    toString() {
        return this.#ground.map(row => row.toString()).join('\n');
    }

}

class Maze extends Ground {
    constructor(initialArray) {
        super(initialArray);
        if (!Maze.check(initialArray)) {
            throw new Error('This is not a maze!');
        }
    }

    /**
     * @param {Array<Array<number>>}maze
     * @returns {boolean}
     */
    static check(maze) {
        return maze.every(row => row.length === maze.length);
    }
}

class Turtle {
    #x = 0
    #y = 0
    constructor() {
    }
}

const array = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
];

console.log('%s', new Maze(array));
